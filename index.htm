<!DOCTYPE html>
<html>
<head>
    <title>Résolveur Quadratique Exact</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        #container { display: flex; flex-wrap: wrap; gap: 20px; }
        #solution-panel, #graph-panel { flex: 1; min-width: 300px; }
        input, button { padding: 10px; margin: 5px 0; width: 100%; }
        button { background: #4CAF50; color: white; border: none; cursor: pointer; }
        #graph { width: 100%; height: 400px; }
        .step { background: #f0f0f0; padding: 10px; margin: 5px 0; border-radius: 5px; }
        .error { color: red; }
    </style>
</head>
<body>
    <h1>Résolveur d'Équations Quadratiques</h1>
    <div id="container">
        <div id="solution-panel">
            <h2>Entrez votre équation :</h2>
            <input type="text" id="equation" placeholder="2x² - 5x + 3 = 0">
            <button onclick="solve()">Résoudre</button>
            <div id="solution"></div>
            <div id="steps"></div>
        </div>
        <div id="graph-panel">
            <h2>Représentation graphique</h2>
            <div id="graph"></div>
        </div>
    </div>

    <script>
        function solve() {
            const equation = document.getElementById("equation").value.trim();
            document.getElementById("solution").innerHTML = '';
            document.getElementById("steps").innerHTML = '';
            
            try {
                const { a, b, c } = parseQuadraticEquation(equation);
                showStep(`Équation normalisée : <strong>${a}x² + ${b}x + ${c} = 0</strong>`);
                
                const discriminant = b*b - 4*a*c;
                showStep(`Calcul du discriminant : Δ = b² - 4ac = ${b}² - 4×${a}×${c} = ${discriminant}`);
                
                if (discriminant < 0) {
                    const realPart = -b/(2*a);
                    const imagPart = Math.sqrt(-discriminant)/(2*a);
                    showStep("Δ < 0 → Solutions complexes :");
                    document.getElementById("solution").innerHTML = `
                        <p>Solutions complexes :<br>
                        <strong>x₁ = ${realPart.toFixed(2)} + ${imagPart.toFixed(2)}i</strong><br>
                        <strong>x₂ = ${realPart.toFixed(2)} - ${imagPart.toFixed(2)}i</strong></p>`;
                    plotGraph(a, b, c, []);
                } 
                else if (discriminant === 0) {
                    const x = -b/(2*a);
                    showStep(`Solution double : x = -b/(2a) = ${x}`);
                    document.getElementById("solution").innerHTML = `
                        <p>Solution double : <strong>x = ${x}</strong></p>`;
                    plotGraph(a, b, c, [x]);
                } 
                else {
                    const x1 = (-b + Math.sqrt(discriminant))/(2*a);
                    const x2 = (-b - Math.sqrt(discriminant))/(2*a);
                    showStep(`Deux solutions réelles :`);
                    showStep(`x₁ = (-b + √Δ)/(2a) = (${-b} + ${Math.sqrt(discriminant).toFixed(2)})/${2*a} = ${x1}`);
                    showStep(`x₂ = (-b - √Δ)/(2a) = (${-b} - ${Math.sqrt(discriminant).toFixed(2)})/${2*a} = ${x2}`);
                    document.getElementById("solution").innerHTML = `
                        <p>Solutions réelles :<br>
                        <strong>x₁ = ${x1.toFixed(2)}</strong><br>
                        <strong>x₂ = ${x2.toFixed(2)}</strong></p>`;
                    plotGraph(a, b, c, [x1, x2]);
                }
            } 
            catch (e) {
                document.getElementById("solution").innerHTML = `
                    <p class="error">Erreur : ${e.message}</p>
                    <p>Format attendu : <strong>ax² + bx + c = 0</strong><br>
                    Exemples valides :<br>
                    • 2x² - 5x + 3 = 0<br>
                    • x² - 4 = 0<br>
                    • 3x² + 2x = 0</p>`;
            }
        }

        function parseQuadraticEquation(eq) {
            // Normalisation de l'équation
            eq = eq.replace(/\s+/g, '')
                   .replace(/=/g, '=0') // "x² = 4" → "x²=04"
                   .split('=')[0];       // Prendre uniquement le côté gauche
            
            if (!eq.match(/^[+-]?([0-9]*x\^2|[0-9]*x²|[0-9]*x|x\^2|x²|x)[+-]?([0-9]*x|[0-9]*)[+-]?[0-9]*$/)) {
                throw new Error("Format d'équation non reconnu");
            }

            // Extraction des coefficients
            const aMatch = eq.match(/([+-]?[0-9]*)x[\^2|²]/) || eq.match(/([+-]?[0-9]*)x$/);
            const bMatch = eq.match(/([+-]?[0-9]*)x(?![\^2|²])/);
            const cMatch = eq.match(/([+-]?[0-9]+)(?![0-9]*x)/);

            const a = aMatch ? parseFloat(aMatch[1] || (aMatch[0].startsWith('-') ? -1 : 1)) : 0;
            const b = bMatch ? parseFloat(bMatch[1] || (bMatch[0].startsWith('-') ? -1 : 1)) : 0;
            const c = cMatch ? parseFloat(cMatch[0]) : 0;

            return { a, b, c };
        }

        function showStep(text) {
            document.getElementById("steps").innerHTML += `<div class="step">${text}</div>`;
        }

        function plotGraph(a, b, c, solutions) {
            const xValues = [];
            const yValues = [];
            
            // Génération des points
            for (let x = -10; x <= 10; x += 0.1) {
                xValues.push(x);
                yValues.push(a*x*x + b*x + c);
            }
            
            // Tracé du graphique
            const trace = {
                x: xValues,
                y: yValues,
                type: 'scatter',
                name: 'y = ' + formatEquation(a, b, c)
            };
            
            // Marqueurs pour les solutions
            const solutionMarkers = {
                x: solutions,
                y: solutions.map(x => a*x*x + b*x + c),
                mode: 'markers',
                marker: { size: 12, color: 'red' },
                name: 'Solutions'
            };
            
            Plotly.newPlot('graph', solutions.length ? [trace, solutionMarkers] : [trace], {
                title: 'Courbe de la fonction',
                xaxis: { title: 'x' },
                yaxis: { title: 'y' }
            });
        }

        function formatEquation(a, b, c) {
            let eq = '';
            if (a !== 0) eq += `${a}x²`;
            if (b > 0) eq += ` + ${b}x`;
            if (b < 0) eq += ` - ${Math.abs(b)}x`;
            if (c > 0) eq += ` + ${c}`;
            if (c < 0) eq += ` - ${Math.abs(c)}`;
            return eq || '0';
        }
    </script>
</body>
</html>
