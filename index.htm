<!DOCTYPE html>
<html>
<head>
    <title>Super Résolveur Mathématique</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .container { display: flex; flex-wrap: wrap; gap: 20px; }
        .panel { flex: 1; min-width: 300px; }
        input, button, select { padding: 10px; margin: 5px 0; width: 100%; }
        button { background: #4CAF50; color: white; border: none; cursor: pointer; }
        #graph { width: 100%; height: 400px; }
        .step { background: #f0f0f0; padding: 10px; margin: 5px 0; border-radius: 5px; }
    </style>
</head>
<body>
    <h1>Super Résolveur Mathématique</h1>
    <div class="container">
        <div class="panel">
            <h2>Résolution d'Équations</h2>
            <select id="eqType">
                <option value="linear">Linéaire (ax + b = c)</option>
                <option value="quadratic">Quadratique (ax² + bx + c = 0)</option>
            </select>
            <input type="text" id="equation" placeholder="3x + 5 = 20 ou 2x^2 -4x = 0">
            <button onclick="solve()">Résoudre</button>
            <div id="solution"></div>
            <div id="steps"></div>
        </div>
        <div class="panel">
            <h2>Graphique</h2>
            <div id="graph"></div>
        </div>
    </div>

    <script>
        // Stockage des résultats
        let currentEquation = '';
        let solutions = [];
        
        function solve() {
            const equation = document.getElementById("equation").value.trim();
            const eqType = document.getElementById("eqType").value;
            currentEquation = equation;
            
            document.getElementById("solution").innerHTML = '';
            document.getElementById("steps").innerHTML = '';
            
            try {
                if (eqType === 'linear') {
                    solveLinear(equation);
                } else {
                    solveQuadratic(equation);
                }
                plotGraph();
            } catch (e) {
                document.getElementById("solution").innerHTML = 
                    `<p style="color:red">Erreur: ${e.message}</p>`;
            }
        }

        function solveLinear(eq) {
            addStep(`Équation originale: <strong>${eq}</strong>`);
            
            // Normalisation
            const parts = eq.split('=');
            if (parts.length !== 2) throw new Error("Format invalide");
            
            const left = parts[0].trim();
            const right = parts[1].trim();
            
            addStep(`Réorganisation: ${left} - (${right}) = 0`);
            
            // Parsing
            const leftParsed = parseSide(left);
            const rightParsed = parseSide(right);
            
            const a = leftParsed.a - rightParsed.a;
            const b = rightParsed.b - leftParsed.b;
            
            addStep(`Forme standard: ${a}x + ${b} = 0`);
            
            if (a === 0) {
                if (b === 0) {
                    addStep("L'équation a ∞ solutions (toujours vraie)");
                    document.getElementById("solution").innerHTML = 
                        "<p>Solution: <strong>∞ solutions</strong></p>";
                } else {
                    addStep("L'équation n'a aucune solution");
                    document.getElementById("solution").innerHTML = 
                        "<p>Solution: <strong>Aucune solution</strong></p>";
                }
                return;
            }
            
            const solution = b / a;
            solutions = [solution];
            
            addStep(`Solution: x = ${b} / ${a} = ${solution}`);
            document.getElementById("solution").innerHTML = 
                `<p>Solution: <strong>x = ${solution}</strong></p>`;
        }

        function solveQuadratic(eq) {
            addStep(`Équation originale: <strong>${eq}</strong>`);
            
            // Normalisation
            const parts = eq.split('=');
            if (parts.length !== 2) throw new Error("Format invalide");
            
            const left = parts[0].trim().replace(/\^2/g, '²');
            const right = parts[1].trim();
            
            addStep(`Réorganisation: ${left} - (${right}) = 0`);
            
            // Parsing
            const parsed = parseQuadratic(left + ' - (' + right + ')');
            const a = parsed.a;
            const b = parsed.b;
            const c = parsed.c;
            
            addStep(`Forme standard: ${a}x² + ${b}x + ${c} = 0`);
            
            const discriminant = b*b - 4*a*c;
            addStep(`Discriminant Δ = ${b}² - 4×${a}×${c} = ${discriminant}`);
            
            if (discriminant < 0) {
                addStep("Δ < 0 → Pas de solution réelle");
                document.getElementById("solution").innerHTML = 
                    "<p>Solution: <strong>Aucune solution réelle</strong></p>";
                solutions = [];
            } 
            else if (discriminant === 0) {
                const solution = -b / (2*a);
                solutions = [solution];
                addStep(`Solution double: x = ${solution}`);
                document.getElementById("solution").innerHTML = 
                    `<p>Solution double: <strong>x = ${solution}</strong></p>`;
            } 
            else {
                const x1 = (-b + Math.sqrt(discriminant)) / (2*a);
                const x2 = (-b - Math.sqrt(discriminant)) / (2*a);
                solutions = [x1, x2];
                addStep(`Deux solutions: x₁ = ${x1}, x₂ = ${x2}`);
                document.getElementById("solution").innerHTML = `
                    <p>Solutions: 
                        <strong>x₁ = ${x1.toFixed(2)}</strong>, 
                        <strong>x₂ = ${x2.toFixed(2)}</strong>
                    </p>`;
            }
        }

        function parseSide(side) {
            let a = 0, b = 0;
            side = side.replace(/\s+/g, '')
                       .replace(/-/g, '+-')
                       .replace(/^\+/, '');
            
            if (!side) return {a: 0, b: 0};
            
            const terms = side.split('+');
            terms.forEach(term => {
                if (term.includes('x')) {
                    const coeff = term.replace('x', '');
                    a += coeff === '' ? 1 : coeff === '-' ? -1 : parseFloat(coeff);
                } else if (term) {
                    b += parseFloat(term);
                }
            });
            return {a, b};
        }

        function parseQuadratic(expr) {
            // Simplification pour l'exemple (implémentation complète nécessite plus de code)
            const parsed = parseSide(expr.replace('x²', 'x'));
            return {a: 1, b: parsed.a, c: parsed.b}; // Adaptation simple
        }

        function addStep(text) {
            document.getElementById("steps").innerHTML += 
                `<div class="step">${text}</div>`;
        }

        function plotGraph() {
            const eqType = document.getElementById("eqType").value;
            const xValues = [];
            const yValues = [];
            
            // Génération des points
            for (let x = -10; x <= 10; x += 0.1) {
                xValues.push(x);
                if (eqType === 'linear') {
                    const parsed = parseSide(currentEquation.split('=')[0]);
                    yValues.push(parsed.a * x + parsed.b);
                } else {
                    yValues.push(x*x - 4); // Simplification pour l'exemple
                }
            }
            
            // Tracé du graphique
            const trace = {
                x: xValues,
                y: yValues,
                type: 'scatter'
            };
            
            // Marqueurs pour les solutions
            const solutionMarkers = {
                x: solutions,
                y: solutions.map(() => 0),
                mode: 'markers',
                marker: { size: 12, color: 'red' }
            };
            
            Plotly.newPlot('graph', [trace, solutionMarkers], {
                title: 'Représentation graphique',
                xaxis: { title: 'x' },
                yaxis: { title: 'y' }
            });
        }
    </script>
</body>
</html>
